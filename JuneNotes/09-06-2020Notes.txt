	How JavaScript Refers HTML Elements?
1. JavaScript can refer HTML elements by using DOM hierarchy.
      - It is the native format of refering HTML elements hence
        it is faster.
      - It uses an index reference.
      - When the position of any element changes you have
        to change the index in your logic.

Ex:
<!DOCTYPE html>
<html>
    <head>
        <script type="text/javascript">
         function bodyload(){
             window.document.images[0].src="../Images/earpods.jpg";
             window.document.forms[0].elements[1].value="Submit";
         }
        </script>
    </head>
    <body onload="bodyload()" >
        <div>
            <img width="100" height="100" border="1">
        </div>
        <div>
            <form>
                Name:                
                <input type="text">
                <input type="button">
            </form>
        </div>
    </body>
</html>

2. JavaScript can refer HTML elements by using their name.   

   - Every HTML element can be defined with a "name"
   - JavaScript can refer element by using name.
   - It element is a child element then without refering to
     the parent element you can't access child element.
   - "name" can be common for several elements.

Ex:
<!DOCTYPE html>
<html>
    <head>
        <script type="text/javascript">
         function bodyload(){
            pic.src="../Images/jblspeaker.jpg";
            frmRegister.btnSubmit.value = "Register";
         }
        </script>
    </head>
    <body onload="bodyload()" >
        <div>
            <img name="pic" width="100" height="100" border="1">
        </div>
        <div>
            <form name="frmRegister">
                Name:
                <input name="txtName" type="text">
                <input name="btnSubmit" type="button">
            </form>
        </div>
    </body>
</html>

3. JavaScript can refer HTML elements by using an ID.
    - Id allows to access element directly without parent reference.
    - Id is unique
    - JavaScript uses "document.getElementById()"
    - ID can conflict with CSS and Server Side.

Ex:
<!DOCTYPE html>
<html>
    <head>
        <script type="text/javascript">
         function bodyload(){
            document.getElementById("pic").src="../Images/shoe.jpg";
            document.getElementById("btnSubmit").value = "Register";
         }
        </script>
    </head>
    <body onload="bodyload()" >
        <div>
            <img id="pic"  width="100" height="100" border="1">
        </div>
        <div>
            <form>
                Name:
                <input  id="txtName" type="text">
                <input id="btnSubmit" type="button">
            </form>
        </div>
    </body>
</html>

4. JavaScript can access or  refer HTML elements by class name.
         - Every HTML element can be defined with multiple classes.
         - JavaScript can access elements by refering to their
           class name.
         - It uses the method
	document.getElementsByClassName()

Ex:
<!DOCTYPE html>
<html>
    <head>
        <style>
            .borderStyle {
                border: 1px solid darkcyan;
                box-shadow: 2px 2px 4px darkcyan;
            }    
        </style>
        <script type="text/javascript">
         function bodyload(){
            document.getElementById("pic").src="../Images/shoe.jpg";
            document.getElementById("btnSubmit").value = "Register";
            var x = document.getElementsByClassName("borderStyle");
            alert("Total Number of Elements using BorderStyle : " + x.length);
         }
        </script>
    </head>
    <body onload="bodyload()" >
        <div>
            <img id="pic" class="borderStyle"  width="100" height="100" border="1">
        </div>
        <div>
            <form>
                Name:
                <input class="borderStyle"  id="txtName" type="text">
                <input class="borderStyle" id="btnSubmit" type="button">
            </form>
        </div>
    </body>
</html>

5. JavaScript can refer and access HTML elements by using Tag Name.
	getElementsByTagName()

Ex:
 var y = document.getElementsByTagName("div");
 alert("Total Number of divs : " + y.length);

6. JavaScript can refer and access HTML elements by using the common name give to them.

	getElementsByName()

Ex:
<!DOCTYPE html>
<html>
    <head>
        <script type="text/javascript">
         function bodyload(){
           var x = document.getElementsByName("pay");
           alert("Total No. of Payment Modes : " + x.length);
         }
        </script>
    </head>
    <body onload="bodyload()" >
         <fieldset>
             <legend>Payment Mode</legend>
             <input type="radio" name="pay"> Cash
             <input type="radio" name="pay"> UPI
             <input type="radio" name="pay"> Credit Card
         </fieldset>
    </body>
</html>

		Input  and Output
Output Methods & Properties
1. alert()
2. confirm()
3. document.write()
4. innerHTML
5. innerText
6. outerHTML
7. console.log(), error(), warn(), info(), debug()

Input Techniques
1. Prompt()
2. Form Input Elements



